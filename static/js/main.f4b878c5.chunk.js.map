{"version":3,"sources":["components/SearchWeatherForm/SearchWeatherForm.tsx","API/API.ts","store/reducers/WeatherReducer.ts","components/SearchWeatherForm/SearchWeatherForm_Container.tsx","assets/icons/weather/clouds.svg","assets/icons/weather/drizzle.svg","assets/icons/weather/rain.svg","assets/icons/weather/snow.svg","assets/icons/weather/sun.svg","assets/icons/weather/thunderstorm.svg","components/WeatherPage/WeatherPage.tsx","store/selectors/WeatherSelector.ts","components/WeatherPage/WeatherPage_Container.tsx","components/Main/Main.tsx","store/Redux.ts","App.tsx","reportWebVitals.ts","index.tsx","components/WeatherPage/weatherPage.module.css","components/SearchWeatherForm/searchWeatherForm.module.css","components/Main/main.module.css"],"names":["validateSchema","Yup","shape","searchWeather","max","withRouter","history","getWeather","className","style","search","head","initialValues","validationSchema","onSubmit","value","push","errors","touched","form","SearchOutlined","icon","input","type","name","placeholder","color","fontWeight","fontSize","weatherAPI","city","weather","axios","get","then","response","alert","JSON","stringify","data","initialState","country","date","description","temp","sunrise","sunset","wind","highestTemp","lowestTemp","clouds","main","actionsWeather","WeatherReducer","state","action","compose","connect","dispatch","a","sys","dt","speed","temp_max","temp_min","all","WeatherPage","days","months","setImg","img","currentDate","Date","getDay","getDate","getMonth","toLocaleTimeString","slice","weatherApp","weatherWrapper","cityName","day","weatherBlock","weatherImgBlock","Thunderstorm","Drizzle","Rain","Snow","Sun","Clouds","src","alt","weatherImg","degrees","Math","floor","degreesText","weatherTableBlock","getWeatherCity","weatherReducer","useState","to","ErrorPage","Main","exact","path","component","SearchWeatherForm_Container","WeatherPage_Container","render","reducersBox","combineReducers","Store","createStore","applyMiddleware","thunkMiddleware","App","store","basename","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f4b878c5.chunk.js","sourcesContent":["import React from 'react'\r\nimport style from './searchWeatherForm.module.css'\r\nimport * as Yup from 'yup'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { SearchOutlined } from '@ant-design/icons'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\n\r\nconst validateSchema = Yup.object().shape({\r\n    searchWeather: Yup.string()\r\n        .max(25, 'Too Long City!')\r\n});\r\n\r\ntype searchWeather = {\r\n    searchWeather: string\r\n}\r\n\r\ntype SearchWeatherFormTypes = {\r\n    getWeather: (city: string) => void\r\n}\r\n\r\nconst SearchWeatherForm = ({ history, getWeather }: RouteComponentProps & SearchWeatherFormTypes): JSX.Element => {\r\n\r\n    const submit = (value: searchWeather) => {\r\n        getWeather(value.searchWeather);\r\n        history.push('/weather');\r\n    };\r\n\r\n    return (\r\n        <div className={style.search}>\r\n\r\n            <p className={style.head}>Weather App</p>\r\n\r\n            <Formik\r\n                initialValues={{searchWeather: ''}}\r\n                validationSchema={validateSchema}\r\n                onSubmit={submit}\r\n            >\r\n                {({errors, touched}) => (\r\n                    <Form className={style.form}>\r\n                        <SearchOutlined className={style.icon} />\r\n                        <Field className={style.input} type=\"text\"\r\n                               name=\"searchWeather\"\r\n                               placeholder={'Enter City'}/>\r\n                        { errors.searchWeather && touched.searchWeather ? (\r\n                            <div style={{ color: '#ff4d4f', fontWeight: 'bold', fontSize: 16 }}>\r\n                                { errors.searchWeather }\r\n                            </div>\r\n                        ) : null }\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withRouter(SearchWeatherForm)","import axios from 'axios'\r\n\r\nexport type WeatherType = {\r\n    weather: [{\r\n        id: number\r\n        main: string\r\n        description: string\r\n        icon: string\r\n    }]\r\n\r\n    main: {\r\n        temp: number\r\n        temp_min: number\r\n        temp_max: number\r\n    }\r\n\r\n    wind: {\r\n        speed: number\r\n    }\r\n\r\n    clouds: {\r\n        all: number\r\n    }\r\n\r\n    dt: number\r\n\r\n    sys: {\r\n        country: string\r\n        sunrise: number\r\n        sunset: number\r\n    }\r\n\r\n    name: string\r\n}\r\n\r\nexport const weatherAPI = {\r\n    getWeatherAPI(city: string) {\r\n        const weather = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=eb516e5fc04e54a205cb177efc9f5fa1`;\r\n\r\n        return axios\r\n            .get<WeatherType>(weather)\r\n            .then(response => {\r\n                alert(JSON.stringify(response.data));\r\n                return response.data\r\n            })\r\n    }\r\n};","import { AppStateType, InferActionsTypes } from '../Redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { weatherAPI } from '../../API/API'\r\n\r\nexport type weatherType = {\r\n    city: string\r\n    country: string\r\n    date: number\r\n    icon: string\r\n    description: string\r\n    temp: number\r\n    sunset: number\r\n    sunrise: number\r\n    wind: number\r\n    highestTemp: number\r\n    lowestTemp: number\r\n    clouds: number\r\n    main: string\r\n}\r\n\r\nexport type initialStateType = {\r\n    weather: Array<weatherType>\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    weather: [\r\n        { city: 'gg', country: 'gg', date: 11, icon: 'ss', description: 'dd', temp: 22, sunrise: 22, sunset: 22, wind: 44,\r\n            highestTemp: 33, lowestTemp: 11, clouds: 22, main: 'gg' }\r\n    ]\r\n};\r\n\r\nconst WeatherReducer = (state = initialState, action: ActionsTypesWeather): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_WEATHER': {\r\n            return {\r\n                ...state,\r\n                weather: [{\r\n                    city: action.city,\r\n                    country: action.country,\r\n                    date: action.date,\r\n                    icon: action.icon,\r\n                    description: action.description,\r\n                    temp: action.temp,\r\n                    sunset: action.sunset,\r\n                    sunrise: action.sunrise,\r\n                    wind: action.wind,\r\n                    highestTemp: action.highestTemp,\r\n                    lowestTemp: action.lowestTemp,\r\n                    clouds: action.clouds,\r\n                    main: action.main\r\n                }]\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//AC\r\ntype ActionsTypesWeather = InferActionsTypes<typeof actionsWeather>\r\n\r\nexport const actionsWeather = {\r\n    setWeather: (\r\n        city: string,\r\n        country: string,\r\n        date: number,\r\n        icon: string,\r\n        description: string,\r\n        temp: number,\r\n        sunset: number,\r\n        sunrise: number,\r\n        wind: number,\r\n        highestTemp: number,\r\n        lowestTemp: number,\r\n        clouds: number,\r\n        main: string\r\n    ) =>\r\n        ({\r\n            type: 'SET_WEATHER',\r\n            city, country, date, icon, description, temp, sunset, sunrise, wind, highestTemp, lowestTemp, clouds, main\r\n        } as const)\r\n};\r\n\r\n//Thunks\r\ntype ThunkWeatherType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypesWeather>\r\n\r\nexport const getWeather = (city: string): ThunkWeatherType => {\r\n\r\n    return async (dispatch) => {\r\n        let response = await weatherAPI.getWeatherAPI(city);\r\n\r\n        dispatch(actionsWeather.setWeather(response.name, response.sys.country, response.dt, response.weather[0].icon,\r\n            response.weather[0].description, response.main.temp, response.sys.sunset, response.sys.sunrise, response.wind.speed,\r\n            response.main.temp_max, response.main.temp_min, response.clouds.all, response.weather[0].main))\r\n    }\r\n};\r\n\r\nexport default WeatherReducer","import React from 'react'\r\nimport SearchWeatherForm from './SearchWeatherForm'\r\nimport { AppStateType } from '../../store/Redux'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getWeather } from '../../store/reducers/WeatherReducer'\r\n\r\ntype statePropsType = {}\r\n\r\ntype dispatchPropsType = {\r\n    getWeather: (city: string) => void\r\n}\r\n\r\ntype ownPropsType = {}\r\n\r\ntype SearchWeatherForm_ContainerTypes = statePropsType & dispatchPropsType & ownPropsType\r\n\r\nconst  SearchWeatherForm_Container:React.FC<SearchWeatherForm_ContainerTypes> = ({ getWeather }) => {\r\n\r\n    return <SearchWeatherForm getWeather={getWeather} />\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({});\r\n\r\nexport default compose(\r\n    connect<statePropsType, dispatchPropsType, ownPropsType, AppStateType>(mapStateToProps,\r\n        { getWeather })\r\n)(SearchWeatherForm_Container)","export default __webpack_public_path__ + \"static/media/clouds.fcffee55.svg\";","export default __webpack_public_path__ + \"static/media/drizzle.2c5145e4.svg\";","export default __webpack_public_path__ + \"static/media/rain.05f5a7b7.svg\";","export default __webpack_public_path__ + \"static/media/snow.382c5815.svg\";","export default __webpack_public_path__ + \"static/media/sun.7d1e1b01.svg\";","export default __webpack_public_path__ + \"static/media/thunderstorm.5b71c348.svg\";","import React from 'react'\r\nimport style from './weatherPage.module.css'\r\nimport Clouds from '../../assets/icons/weather/clouds.svg'\r\nimport Drizzle from '../../assets/icons/weather/drizzle.svg'\r\nimport Rain from '../../assets/icons/weather/rain.svg'\r\nimport Snow from '../../assets/icons/weather/snow.svg'\r\nimport Sun from '../../assets/icons/weather/sun.svg'\r\nimport Thunderstorm from '../../assets/icons/weather/thunderstorm.svg'\r\nimport { weatherType } from '../../store/reducers/WeatherReducer'\r\n\r\ntype WeatherPageTypes = {\r\n    weather: Array<weatherType>\r\n    months: Array<string>\r\n    days: Array<string>\r\n    img: string\r\n\r\n    setImg: (img: string) => void\r\n}\r\n\r\nconst WeatherPage:React.FC<WeatherPageTypes> = ({ weather, days, months, setImg, img }) => {\r\n\r\n    const currentDate = new Date();\r\n    const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\r\n        months[currentDate.getMonth()]\r\n        }`;\r\n\r\n    const sunset = new Date(weather[0].sunset * 1000).toLocaleTimeString().slice(0, 5);\r\n    const sunrise = new Date(weather[0].sunrise * 1000).toLocaleTimeString().slice(0, 5);\r\n\r\n    return (\r\n        <div className={style.weather}>\r\n\r\n            <div className={style.weatherApp}>\r\n                <p>Weather App</p>\r\n            </div>\r\n\r\n            <div className={style.weatherWrapper}>\r\n                <div>\r\n                    <p className={style.cityName}>{weather[0].city}, {weather[0].country}</p>\r\n                    <p className={style.day}>{date}</p>\r\n                </div>\r\n\r\n                <div className={style.weatherBlock}>\r\n                    <div className={style.weatherImgBlock}>\r\n                        <div>\r\n                            {\r\n                                weather[0].main === 'Thunderstorm' ? setImg(Thunderstorm)\r\n                                    : weather[0].main === 'Drizzle' ? setImg(Drizzle)\r\n                                    : weather[0].main === 'Rain' ? setImg(Rain)\r\n                                    : weather[0].main === 'Snow' ? setImg(Snow)\r\n                                    : weather[0].main === 'Clear' ? setImg(Sun)\r\n                                    : weather[0].main === 'Clouds' ? setImg(Clouds) : setImg(Clouds)\r\n                            }\r\n                            <img src={img} alt=\"weatherImg\" className={style.weatherImg} />\r\n                        </div>\r\n\r\n                        <div>\r\n                            <p className={style.degrees}>{Math.floor(weather[0].temp - 273.15)}°</p>\r\n                            <p className={style.degreesText}>{weather[0].description}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={style.weatherTableBlock}>\r\n                        <p>{Math.floor(weather[0].highestTemp - 273.15)}°<br/>Hight</p>\r\n                        <p>{weather[0].wind}mph<br/>Wind</p>\r\n                        <p>{sunrise}<br/>Sunrise</p>\r\n                        <p>{Math.floor(weather[0].lowestTemp - 273.15)}°<br/>Low</p>\r\n                        <p>{weather[0].clouds}%<br/>Rain</p>\r\n                        <p>{sunset}<br/>Sunset</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WeatherPage","import { AppStateType } from '../Redux'\r\n\r\nexport const getWeatherCity = (state: AppStateType) => {\r\n    return state.weatherReducer.weather\r\n};","import React, { useState } from 'react'\r\nimport WeatherPage from './WeatherPage'\r\nimport { weatherType } from '../../store/reducers/WeatherReducer'\r\nimport { AppStateType } from '../../store/Redux'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { getWeatherCity } from '../../store/selectors/WeatherSelector'\r\nimport { Redirect } from 'react-router'\r\n\r\ntype statePropsType = {\r\n    weather: Array<weatherType>\r\n}\r\n\r\ntype dispatchPropsType = {}\r\n\r\ntype ownPropsType = {}\r\n\r\ntype WeatherPage_ContainerTypes = statePropsType & dispatchPropsType & ownPropsType\r\n\r\nconst WeatherPage_Container:React.FC<WeatherPage_ContainerTypes> = ({ weather }) => {\r\n\r\n    const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'Nocvember',\r\n        'December',\r\n    ];\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    const [img, setImg] = useState('');\r\n\r\n    return weather[0].city === 'gg'\r\n        ? <Redirect to={'/search'} />\r\n        : <WeatherPage weather={weather} days={days} months={months} img={img} setImg={setImg} />\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    weather: getWeatherCity(state)\r\n});\r\n\r\nexport default compose(\r\n    connect<statePropsType, dispatchPropsType, ownPropsType, AppStateType>(mapStateToProps, {})\r\n)(WeatherPage_Container)","import React from 'react'\r\nimport style from './main.module.css'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport SearchWeatherForm_Container from '../SearchWeatherForm/SearchWeatherForm_Container'\r\nimport WeatherPage_Container from '../WeatherPage/WeatherPage_Container'\r\n\r\nconst ErrorPage = () => {\r\n    return <div>error</div>;\r\n};\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div className={style.main}>\r\n            <Switch>\r\n                <Route exact path={\"/search\"} component={SearchWeatherForm_Container} />\r\n                <Route exact path={\"/weather\"} component={WeatherPage_Container} />\r\n                <Route exact path='/' render={() => <Redirect to={\"/search\"} />}/>\r\n                <Route path='*' component={ErrorPage}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Main","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport WeatherReducer from './reducers/WeatherReducer'\r\n\r\nlet reducersBox = combineReducers({\r\n    weatherReducer: WeatherReducer\r\n});\r\n\r\n\r\ntype rootReducerType = typeof reducersBox;\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nlet Store = createStore(reducersBox, applyMiddleware(thunkMiddleware));\r\n\r\nexport default Store","import React from 'react';\nimport Main from './components/Main/Main'\nimport { HashRouter } from 'react-router-dom'\nimport Store from './store/Redux'\nimport { Provider } from 'react-redux'\n\nconst App = () => {\n    return (\n        <Provider store={Store}>\n            <HashRouter basename={process.env.PUBLIC_URL}>\n                <Main/>\n            </HashRouter>\n        </Provider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"weatherPage_weather__RmXFW\",\"weatherWrapper\":\"weatherPage_weatherWrapper__zTEOd\",\"weatherApp\":\"weatherPage_weatherApp__2ozyx\",\"cityName\":\"weatherPage_cityName__2hvXl\",\"day\":\"weatherPage_day__1ijMo\",\"weatherImg\":\"weatherPage_weatherImg__3loaJ\",\"weatherImgBlock\":\"weatherPage_weatherImgBlock__1xCyN\",\"degrees\":\"weatherPage_degrees__1X8KQ\",\"degreesText\":\"weatherPage_degreesText__JOLed\",\"weatherBlock\":\"weatherPage_weatherBlock__1hBkJ\",\"weatherTableBlock\":\"weatherPage_weatherTableBlock__3YzDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"searchWeatherForm_head__1Y8IM\",\"form\":\"searchWeatherForm_form__34fMJ\",\"input\":\"searchWeatherForm_input__dsTVE\",\"icon\":\"searchWeatherForm_icon__2agvq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"main_main__1asMB\"};"],"sourceRoot":""}